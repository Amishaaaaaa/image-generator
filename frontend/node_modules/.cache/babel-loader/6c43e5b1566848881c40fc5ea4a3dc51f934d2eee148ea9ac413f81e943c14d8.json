{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\image-generator\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import WorkflowForm from './components/WorkflowForm';\nimport ImageDisplay from './components/ImageDisplay';\nimport './styles/App.css';\n\n// const App = () => {\n//     const [imageUrl, setImageUrl] = React.useState(\"\");\n\n//     const handleGenerate = async (params) => {\n//         const response = await fetch(\"http://127.0.0.1:5000/generate\", {\n//             method: \"POST\",\n//             headers: { \"Content-Type\": \"application/json\" },\n//             body: JSON.stringify(params),\n//         });\n//         const data = await response.json();\n//         setImageUrl(data.image_url);\n//     };\n\n//     return (\n//         <div className=\"App\">\n//             <h1>AI Workflow UI</h1>\n//             <WorkflowForm onGenerate={handleGenerate} />\n//             <ImageDisplay imageUrl={imageUrl} />\n//         </div>\n//     );\n// };\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport WorkflowForm from './WorkflowForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [imageUrl, setImageUrl] = useState(null);\n  const onGenerate = params => {\n    const {\n      seed,\n      width,\n      height,\n      text\n    } = params;\n\n    // Make the fetch request to the backend\n    fetch('http://localhost:5000/generate-image', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        seed,\n        width,\n        height,\n        text\n      }) // Send the form data to the backend\n    }).then(response => response.json()).then(data => {\n      if (data.imageUrl) {\n        setImageUrl(data.imageUrl); // Assuming the backend sends back an image URL\n      } else {\n        console.error('Image generation failed');\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Generate Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WorkflowForm, {\n      onGenerate: onGenerate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), imageUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Generated Image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imageUrl,\n        alt: \"Generated\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"xEBW4XpPUCod2Dzar7unlNaxaTU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ImageDisplay","React","useState","WorkflowForm","jsxDEV","_jsxDEV","App","_s","imageUrl","setImageUrl","onGenerate","params","seed","width","height","text","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","error","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/Dell/image-generator/frontend/src/App.js"],"sourcesContent":["// import React from 'react';\r\n// import WorkflowForm from './components/WorkflowForm';\r\nimport ImageDisplay from './components/ImageDisplay';\r\nimport './styles/App.css';\r\n\r\n// const App = () => {\r\n//     const [imageUrl, setImageUrl] = React.useState(\"\");\r\n\r\n//     const handleGenerate = async (params) => {\r\n//         const response = await fetch(\"http://127.0.0.1:5000/generate\", {\r\n//             method: \"POST\",\r\n//             headers: { \"Content-Type\": \"application/json\" },\r\n//             body: JSON.stringify(params),\r\n//         });\r\n//         const data = await response.json();\r\n//         setImageUrl(data.image_url);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"App\">\r\n//             <h1>AI Workflow UI</h1>\r\n//             <WorkflowForm onGenerate={handleGenerate} />\r\n//             <ImageDisplay imageUrl={imageUrl} />\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default App;\r\n\r\nimport React, { useState } from 'react';\r\nimport WorkflowForm from './WorkflowForm';\r\n\r\nconst App = () => {\r\n  const [imageUrl, setImageUrl] = useState(null);\r\n\r\n  const onGenerate = (params) => {\r\n    const { seed, width, height, text } = params;\r\n\r\n    // Make the fetch request to the backend\r\n    fetch('http://localhost:5000/generate-image', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ seed, width, height, text }), // Send the form data to the backend\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.imageUrl) {\r\n          setImageUrl(data.imageUrl);  // Assuming the backend sends back an image URL\r\n        } else {\r\n          console.error('Image generation failed');\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Generate Image</h1>\r\n      <WorkflowForm onGenerate={onGenerate} />\r\n      \r\n      {imageUrl && (\r\n        <div>\r\n          <h3>Generated Image:</h3>\r\n          <img src={imageUrl} alt=\"Generated\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA;AACA;AACA,OAAOA,YAAY,MAAM,2BAA2B;AACpD,OAAO,kBAAkB;;AAEzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMQ,UAAU,GAAIC,MAAM,IAAK;IAC7B,MAAM;MAAEC,IAAI;MAAEC,KAAK;MAAEC,MAAM;MAAEC;IAAK,CAAC,GAAGJ,MAAM;;IAE5C;IACAK,KAAK,CAAC,sCAAsC,EAAE;MAC5CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,IAAI;QAAEC,KAAK;QAAEC,MAAM;QAAEC;MAAK,CAAC,CAAC,CAAE;IACvD,CAAC,CAAC,CACCO,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACd,IAAIA,IAAI,CAACjB,QAAQ,EAAE;QACjBC,WAAW,CAACgB,IAAI,CAACjB,QAAQ,CAAC,CAAC,CAAE;MAC/B,CAAC,MAAM;QACLkB,OAAO,CAACC,KAAK,CAAC,yBAAyB,CAAC;MAC1C;IACF,CAAC,CAAC,CACDC,KAAK,CAAED,KAAK,IAAK;MAChBD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC,CAAC,CAAC;EACN,CAAC;EAED,oBACEtB,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAAwB,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvB5B,OAAA,CAACF,YAAY;MAACO,UAAU,EAAEA;IAAW;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAEvCzB,QAAQ,iBACPH,OAAA;MAAAwB,QAAA,gBACExB,OAAA;QAAAwB,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzB5B,OAAA;QAAK6B,GAAG,EAAE1B,QAAS;QAAC2B,GAAG,EAAC;MAAW;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAxCID,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AA0CT,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}