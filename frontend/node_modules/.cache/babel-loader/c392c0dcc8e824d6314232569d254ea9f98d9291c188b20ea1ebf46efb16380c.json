{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\image-generator\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import './styles/App.css';\n// import React, { useState } from 'react';\n// import WorkflowForm from './components//WorkflowForm';\n\n// const App = () => {\n//   const [imageUrl, setImageUrl] = useState(null);\n\n//   const onGenerate = (params) => {\n//     const { seed, width, height, text } = params;\n\n//     // Make the fetch request to the backend\n//     fetch('http://localhost:5000/generate', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ seed, width, height, text }), // Send the form data to the backend\n//     })\n//       .then((response) => response.json())\n//       .then((data) => {\n//         if (data.image_url) {\n//           setImageUrl(data.image_url);  // Assuming the backend sends back an image URL\n//         } else {\n//           console.error('Image generation failed');\n//         }\n//       })\n//       .catch((error) => {\n//         console.error('Error:', error);\n//       });\n//   };\n\n//   return (\n//     <div>\n//       <h1>Generate Image</h1>\n//       <WorkflowForm onGenerate={onGenerate} />\n\n//       {imageUrl && (\n//         <div>\n//           <h3>Generated Image:</h3>\n//           <img src={imageUrl} alt=\"Generated\" />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport WorkflowForm from './components/WorkflowForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [imageUrl, setImageUrl] = useState(null);\n  const [error, setError] = useState(null); // Track error state\n\n  const onGenerate = params => {\n    const {\n      seed,\n      width,\n      height,\n      text\n    } = params;\n\n    // Make the fetch request to the backend\n    fetch('http://localhost:5000/generate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        seed,\n        width,\n        height,\n        text\n      }) // Send the form data to the backend\n    }).then(response => response.json()).then(data => {\n      if (data.image_url) {\n        setImageUrl(`http://localhost:5000${data.image_url}`); // Prepend the base URL to the image path\n        setError(null); // Clear any previous errors\n      } else {\n        console.error('Image generation failed');\n        setError('Failed to generate image. Please try again.');\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n      setError('An error occurred while generating the image.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Generate Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WorkflowForm, {\n      onGenerate: onGenerate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this), \"  \", imageUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Generated Image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imageUrl,\n        alt: \"Generated\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ZNMWe1NYYAMErk57O3oB9i6anW4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","WorkflowForm","jsxDEV","_jsxDEV","App","_s","imageUrl","setImageUrl","error","setError","onGenerate","params","seed","width","height","text","fetch","method","headers","body","JSON","stringify","then","response","json","data","image_url","console","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/Dell/image-generator/frontend/src/App.js"],"sourcesContent":["// import './styles/App.css';\r\n// import React, { useState } from 'react';\r\n// import WorkflowForm from './components//WorkflowForm';\r\n\r\n// const App = () => {\r\n//   const [imageUrl, setImageUrl] = useState(null);\r\n\r\n//   const onGenerate = (params) => {\r\n//     const { seed, width, height, text } = params;\r\n\r\n//     // Make the fetch request to the backend\r\n//     fetch('http://localhost:5000/generate', {\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify({ seed, width, height, text }), // Send the form data to the backend\r\n//     })\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         if (data.image_url) {\r\n//           setImageUrl(data.image_url);  // Assuming the backend sends back an image URL\r\n//         } else {\r\n//           console.error('Image generation failed');\r\n//         }\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error('Error:', error);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Generate Image</h1>\r\n//       <WorkflowForm onGenerate={onGenerate} />\r\n      \r\n//       {imageUrl && (\r\n//         <div>\r\n//           <h3>Generated Image:</h3>\r\n//           <img src={imageUrl} alt=\"Generated\" />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\nimport React, { useState } from 'react';\r\nimport WorkflowForm from './components/WorkflowForm';\r\n\r\nconst App = () => {\r\n  const [imageUrl, setImageUrl] = useState(null);\r\n  const [error, setError] = useState(null);  // Track error state\r\n\r\n  const onGenerate = (params) => {\r\n    const { seed, width, height, text } = params;\r\n\r\n    // Make the fetch request to the backend\r\n    fetch('http://localhost:5000/generate', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ seed, width, height, text }), // Send the form data to the backend\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.image_url) {\r\n          setImageUrl(`http://localhost:5000${data.image_url}`);  // Prepend the base URL to the image path\r\n          setError(null);  // Clear any previous errors\r\n        } else {\r\n          console.error('Image generation failed');\r\n          setError('Failed to generate image. Please try again.');\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error);\r\n        setError('An error occurred while generating the image.');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Generate Image</h1>\r\n      <WorkflowForm onGenerate={onGenerate} />\r\n      \r\n      {error && <p style={{ color: 'red' }}>{error}</p>}  {/* Display error message if present */}\r\n      \r\n      {imageUrl && (\r\n        <div>\r\n          <h3>Generated Image:</h3>\r\n          <img src={imageUrl} alt=\"Generated\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}